package com.neusoft.hz.webservice.sendMessage;

import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.3.1
 * 2019-03-18T15:48:22.677+08:00
 * Generated source version: 3.3.1
 *
 */
@WebServiceClient(name = "ServiceImpl",
                  wsdlLocation = "classpath:wsdl/ActiveHeartBeatService.Wsdl",
                  targetNamespace = "http://hz.neusoft.com")
public class ServiceImpl extends javax.xml.ws.Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://hz.neusoft.com", "ServiceImpl");
    public final static QName ServiceImplPort = new QName("http://hz.neusoft.com", "ServiceImplPort");
    static {
        URL url = ServiceImpl.class.getClassLoader().getResource("wsdl/ActiveHeartBeatService.Wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(ServiceImpl.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "classpath:wsdl/ActiveHeartBeatService.Wsdl");
        }
        WSDL_LOCATION = url;
    }

    public ServiceImpl(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public ServiceImpl(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public ServiceImpl() {
        super(WSDL_LOCATION, SERVICE);
    }

    public ServiceImpl(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public ServiceImpl(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public ServiceImpl(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns Service
     */
    @WebEndpoint(name = "ServiceImplPort")
    public Service getServiceImplPort() {
        return super.getPort(ServiceImplPort, Service.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns Service
     */
    @WebEndpoint(name = "ServiceImplPort")
    public Service getServiceImplPort(WebServiceFeature... features) {
        return super.getPort(ServiceImplPort, Service.class, features);
    }

}
